model Content {
  id       String      @id @default(ulid())
  sanityId String      @unique
  type     ContentType
  views    Int         @default(0)
  isCourse Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes           Like[]
  comments        Comment[]
  reviews         Review[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
  programProgress ProgramProgress[]
  timeSpent       TimeSpent[]

  @@unique([sanityId, type])
}

enum ContentType {
  ARTICLE
  TUTORIAL
  COURSE
  PROGRAM
}

model ProgramProgress {
  id String @id @default(ulid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  content   Content @relation(fields: [contentId], references: [id])
  contentId String

  currentCourse    String?
  currentModule    String? // Active module ID
  currentLesson    String? // Active lesson ID
  completedLessons Json? // List of completed lesson IDs
  completedModules Json? // List of completed module IDs
  completedCourses Json?

  courses CourseProgress[]

  // Progress metrics
  progress    Int         @default(0) // 0-100
  isCompleted Boolean     @default(false)
  completedAt DateTime?
  startedAt   DateTime    @default(now())
  lastActive  DateTime    @default(now())
  timeSpent   TimeSpent[]

  @@unique([userId, contentId])
  @@index([userId, isCompleted])
  @@index([userId])
  @@index([contentId])
}

model CourseProgress {
  id String @id @default(ulid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  content   Content @relation(fields: [contentId], references: [id])
  contentId String

  currentModule    String? // Active module ID
  currentLesson    String? // Active lesson ID
  completedLessons Json? // List of completed lesson IDs
  completedModules Json? // List of completed module IDs

  modules ModuleProgress[]

  // Progress metrics
  progress          Int              @default(0) // 0-100
  isCompleted       Boolean          @default(false)
  completedAt       DateTime?
  startedAt         DateTime         @default(now())
  lastActive        DateTime         @default(now())
  timeSpent         TimeSpent[]
  ProgramProgress   ProgramProgress? @relation(fields: [programProgressId], references: [id])
  programProgressId String?

  @@unique([userId, contentId])
  @@index([userId, isCompleted])
  @@index([userId])
  @@index([contentId])
}

model ModuleProgress {
  id       String @id @default(ulid())
  sanityId String @unique

  startedAt   DateTime?
  completedAt DateTime?
  progress    Int       @default(0) // 0â€“100
  isCompleted Boolean   @default(false)

  currentLesson    String? // Active lesson ID
  completedLessons Json? // List of completed lesson IDs

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)
  courseProgressId String
  timeSpent        TimeSpent[]

  @@index([userId])
  @@index([courseProgressId])
  @@index([userId, isCompleted])
  @@index([courseProgressId, userId])
}

model Like {
  id        String   @id @default(ulid())
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  @@unique([contentId, userId])
  @@unique([commentId, userId])
}

model Comment {
  id        String   @id @default(ulid())
  body      String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([contentId])
  @@index([parentId])
  @@index([createdAt])
}

model Review {
  id       String       @id @default(ulid())
  rating   Int
  body     String
  featured Boolean      @default(false)
  status   ReviewStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([authorId, contentId])
  @@index([authorId])
  @@index([contentId])
  @@index([createdAt])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Enrollment {
  id        String  @id @default(ulid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String

  subscription   Subscription? @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId String?

  enrolledAt DateTime  @default(now())
  expiresAt  DateTime? // Null = access follows subscription

  @@unique([userId, contentId])
  @@index([subscriptionId])
  @@index([expiresAt])
}

model TimeSpent {
  id        String   @id @default(ulid())
  timeSpent Int // Time spent in milliseconds
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  courseProgressId String?
  courseProgress   CourseProgress? @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)

  moduleProgressId String?
  moduleProgress   ModuleProgress? @relation(fields: [moduleProgressId], references: [id], onDelete: Cascade)

  pageType          PageType
  lastActive        DateTime         @default(now())
  ProgramProgress   ProgramProgress? @relation(fields: [programProgressId], references: [id])
  programProgressId String?

  @@index([userId])
  @@index([contentId])
  @@index([courseProgressId])
  @@index([moduleProgressId])
  @@index([lastActive])
}

enum PageType {
  ARTICLE
  TUTORIAL
  PROGRAM
  COURSE
  MODULE
  LESSON
}
