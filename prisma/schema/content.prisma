model Content {
  id       String      @id @default(ulid())
  sanityId String      @unique
  type     ContentType
  views    Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes    Like[]
  comments Comment[]

  @@unique([sanityId, type])
}

enum ContentType {
  ARTICLE
  TUTORIAL
}

enum ContentStatus {
  LOCKED
  IN_PROGRESS
  COMPLETED
}

/**
 * Time spent programs will be a summation of time spent on it courses
 */
model Program {
  id         String @id @default(ulid())
  sanityId   String @unique
  sanitySlug String @unique

  progress    Int           @default(0)
  unlockeddAt DateTime      @default(now())
  completedAt DateTime?
  status      ContentStatus @default(LOCKED)
  courses     Course[]
  reviews     Review[]
  enrollments Enrollment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@index([userId, status])
}

/**
 * Time spent courses will be a summation of time spent on it modules
 */
model Course {
  id         String @id @default(ulid())
  sanityId   String @unique
  sanitySlug String @unique

  progress    Int           @default(0)
  unlockedAt  DateTime      @default(now())
  completedAt DateTime?
  status      ContentStatus @default(LOCKED)
  modules     Module[]
  reviews     Review[]
  enrollments Enrollment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  program   Program? @relation(fields: [programId], references: [id])
  programId String?

  @@index([userId])
  @@index([programId])
  @@index([userId, status])
}

/**
 * Time spent modules will be a summation of time spent on it sub-modules
 */
model Module {
  id         String @id @default(ulid())
  sanityId   String @unique
  sanitySlug String @unique

  progress    Int           @default(0)
  unlockedAt  DateTime      @default(now())
  completedAt DateTime?
  status      ContentStatus @default(LOCKED)
  subModules  SubModule[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@index([userId])
  @@index([courseId])
  @@index([userId, status])
}

/**
 * Time spent sub modules will be a summation of time spent on it lessons
 */
model SubModule {
  id         String @id @default(ulid())
  sanityId   String @unique
  sanitySlug String @unique

  progress    Int           @default(0)
  unlockedAt  DateTime      @default(now())
  completedAt DateTime?
  status      ContentStatus @default(LOCKED)
  lessons     Lesson[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  @@index([userId])
  @@index([moduleId])
  @@index([userId, status])
}

model Lesson {
  id         String @id @default(ulid())
  sanityId   String @unique
  sanitySlug String @unique

  progress    Int           @default(0)
  unlockedAt  DateTime      @default(now())
  completedAt DateTime?
  status      ContentStatus @default(LOCKED)
  timeSpent   TimeSpent[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subModule   SubModule @relation(fields: [subModuleId], references: [id], onDelete: Cascade)
  subModuleId String

  @@index([userId])
  @@index([subModuleId])
  @@index([userId, status])
}

model Like {
  id        String   @id @default(ulid())
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  @@unique([contentId, userId])
  @@unique([commentId, userId])
}

model Comment {
  id        String   @id @default(ulid())
  body      String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([contentId])
  @@index([parentId])
  @@index([createdAt])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Review {
  id       String       @id @default(ulid())
  rating   Int
  body     String
  featured Boolean      @default(false)
  status   ReviewStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  programId String?
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([courseId])
  @@index([programId])
  @@index([createdAt])
}

model Enrollment {
  id String @id @default(ulid())

  subscription   Subscription? @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId String?

  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  programId String?
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, courseId])
  @@unique([userId, programId])
  @@index([subscriptionId])
}

model TimeSpent {
  id         String   @id @default(ulid())
  duration   Int      @default(0) // Duration in milliseconds
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String?

  @@index([userId])
  @@index([lessonId])
  @@index([lastActive])
}
