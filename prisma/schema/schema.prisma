generator client {
  provider        = "prisma-client"
  output          = "../../app/generated/prisma"
  moduleFormat    = "esm"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// The central model representing a user of the application.
model User {
  id           String    @id @default(ulid())
  email        String    @unique
  name         String
  /// Whether the user is subscribed to marketing emails.
  isSubscribed Boolean   @default(false)
  /// The timestamp of the user's last seen activity.
  lastSeenAt   DateTime?
  /// The user's timezone (e.g., "America/New_York").
  timezone     String?
  /// JSON object for storing user-specific preferences.
  preferences  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  image                UserImage?
  password             Password?
  subscriptions        Subscription[]
  notificationSettings NotificationSetting?
  roles                Role[]
  sessions             Session[]
  connections          Connection[]
  likes                Like[]
  comments             Comment[]
  reviews              Review[]
  programs             Program[]
  courses              Course[]
  modules              Module[]
  subModules           SubModule[]
  lessons              Lesson[]
  enrollments          Enrollment[]
  certificates         Certificate[]
  timeSpent            TimeSpent[]
  teams                Team[]
  teamMembers          TeamMember[]
  teamInvites          TeamInvite[]

  // Audit log relations
  auditLogs            AuditLog[]
  targetAuditLogs      AuditLog[]       @relation("TargetUserAuditLogs")
  targetAdminAuditLogs AuditLog[]       @relation("TargetAdminAuditLogs")
  auditLogExports      AuditLogExport[]

  // Challenge relations
  challengeSubmissions ChallengeSubmission[]
  challengeBadges      UserChallengeBadge[]
  leaderboardEntries   LeaderboardEntry[]
  userChallenges       UserChallenge[]
}

/// Stores the hashed password for a user who signs up with email and password.
model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

/// Represents a user's profile image.
model UserImage {
  id      String  @id @default(cuid())
  /// The key or path to the image file in the storage service (e.g., S3, Cloudinary).
  fileKey String
  altText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

/// Represents a user's login session.
model Session {
  id String @id @default(ulid())

  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

/// Used for handling one-time-password (OTP) verifications, such as email confirmation or password resets.
model Verification {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())

  /// The type of verification being performed.
  type      VerificationType
  /// The target of the verification (e.g., the email address).
  target    String
  /// The secret key used to generate the OTP.
  secret    String
  /// The algorithm used for OTP generation.
  algorithm String
  /// The number of digits in the OTP.
  digits    Int
  /// The validity period of the OTP in seconds.
  period    Int
  /// The set of valid characters for the OTP.
  charSet   String
  /// The timestamp when this verification record can be safely deleted.
  expiresAt DateTime?

  @@unique([target, type])
}

/// The type of action requiring OTP verification.
enum VerificationType {
  onboarding
  reset_password
  change_email
}

/// Represents a connection to a third-party OAuth provider (e.g., GitHub, Google).
model Connection {
  id           String @id @default(ulid())
  /// The name of the OAuth provider (e.g., "github").
  providerName String
  /// The user's unique ID from the OAuth provider.
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  @@unique([providerName, userId])
  @@index([userId])
}

/// Defines a specific permission in the system, combining an action, entity, and access level.
model Permission {
  id          String @id @default(ulid())
  /// The action being permitted (e.g., CREATE, READ, UPDATE, DELETE).
  action      Action
  /// The entity the action applies to (e.g., USER, COMMENT).
  entity      Entity
  /// The access level for the action (e.g., OWN for records owned by the user, ANY for all records).
  access      String
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

/// The type of action that can be performed on an entity.
enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

/// The entities within the system that can have permissions.
enum Entity {
  USER
  COMMENT
  REPLY
  REVIEW
  PROFILE
}

/// Represents a role that can be assigned to users, granting them a set of permissions.
model Role {
  id          String   @id @default(ulid())
  name        RoleName @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions Permission[]

  @@index([name])
}

/// The names of the roles available in the system.
enum RoleName {
  ADMIN
  MODERATOR
  USER
}

/// Stores a user's notification preferences.
model NotificationSetting {
  id               String  @id @default(ulid())
  /// Notifications about new content (articles, tutorials, etc.).
  contentUpdate    Boolean @default(true)
  /// Notifications about promotions and special offers.
  promotions       Boolean @default(false)
  /// Notifications about community events and announcements.
  communityEvents  Boolean @default(true)
  /// A master switch to toggle all notifications.
  allNotifications Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Represents a certificate of completion earned by a user.
model Certificate {
  id        String   @id @default(ulid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}
