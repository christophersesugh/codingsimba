generator client {
  provider     = "prisma-client"
  output       = "../app/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(ulid())
  email       String       @unique
  onboarded   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  profile     Profile?
  likes       Like[]
  comments    Comment[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]

  @@index([email])
}

model Profile {
  id        String   @id @default(ulid())
  name      String?  @default("")
  image     String?  @default("")
  bio       String?  @default("")
  location  String?  @default("")
  website   String?  @default("")
  github    String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@index([userId])
}

model Permission {
  id          String @id @default(ulid())
  action      Action // e.g create, read, update, delete
  entity      Entity // e.g user, articleComment, tutorialComment
  access      String // e.g own, any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access], name: "unique_permission")
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Entity {
  USER
  ARTICLE_COMMENT
  TUTORIAL_COMMENT
}

model Role {
  id          String   @id @default(ulid())
  name        RoleName @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions Permission[]

  @@index([name])
}

enum RoleName {
  ADMIN
  USER
}

model Session {
  id String @id @default(ulid())

  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

// model Verification {
//   id        String   @id @default(ulid())
//   createdAt DateTime @default(now())

//   type      String // e.g email, phone (Type of verification)
//   target    String // e.g user's email or phone number (What we are verifying)
//   secret    String // The secret key used to generate the otp
//   algorithm String //The algorithm used to generate the otp
//   digits    Int // The number of digits in the otp
//   period    Int // The number of seconds or minutes the otp is valid for
//   charSet   String // The valid characters for the otp
//   expiresAt DateTime? // When is safe to delete the verification

//   @@index([type, target])
// }

model Connection {
  id           String @id @default(ulid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  @@unique([userId])
}

enum ContentType {
  ARTICLE
  TUTORIAL
}

model Content {
  id        String      @id @default(ulid())
  sanityId  String      @unique
  type      ContentType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  views     Int         @default(0)

  likes    Like[]
  comments Comment[]

  @@index([sanityId])
  @@index([sanityId, type])
  @@index([type, createdAt])
}

model Like {
  id          String   @id @default(ulid())
  count       Int      @default(0)
  anonymousId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, contentId], name: "user_content_like")
  @@unique([anonymousId, contentId], name: "anon_content_like")
  @@index([contentId, createdAt])
}

model Comment {
  id        String   @id @default(ulid())
  body      String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId, createdAt])
  @@index([parentId])
}
