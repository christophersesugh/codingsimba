generator client {
  provider     = "prisma-client"
  output       = "../app/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(ulid())
  email                String                @unique
  isVerified           Boolean               @default(false)
  isSubscribed         Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  profile              Profile?
  likes                Like[]
  comments             Comment[]
  roles                Role[]
  sessions             Session[]
  connections          Connection[]
  password             Password?
  notificationSettings NotificationSetting[]
  reviews              Review[]
  courseProgress       CourseProgress[]
  moduleProgress       ModuleProgress[]
  enrollments          Enrollment[]
  subscriptions        Subscription[]
  certificates         Certificate[]

  @@index([email])
}

model Profile {
  id        String   @id @default(ulid())
  name      String?  @default("")
  image     String?  @default("")
  bio       String?  @default("")
  location  String?  @default("")
  website   String?  @default("")
  github    String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@index([userId])
}

model Permission {
  id          String @id @default(ulid())
  action      Action // e.g create, read, update, delete
  entity      Entity // e.g user, comment, review, settings
  access      String // e.g OWN, ANY
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Entity {
  USER
  COMMENT
  REVIEW
  SETTINGS
}

model Role {
  id          String   @id @default(ulid())
  name        RoleName @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions Permission[]

  @@index([name])
}

enum RoleName {
  ADMIN
  MODERATOR
  USER
}

model NotificationSetting {
  id               String  @id @default(ulid())
  contentUpdate    Boolean @default(true)
  newContent       Boolean @default(true)
  promotions       Boolean @default(false)
  communityEvents  Boolean @default(true)
  allNotifications Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Certificate {
  id        String   @id @default(ulid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}
